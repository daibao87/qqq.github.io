// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[3..5], a=DM1, b=DM2, c=DM3, d=DM4, e=DM5, f=DM6, g=DM7, h=DM8);   
    RAM8(in=in, load=DM1, address=address[0..2], out=RA1);
    RAM8(in=in, load=DM2, address=address[0..2], out=RA2);
    RAM8(in=in, load=DM3, address=address[0..2], out=RA3);
    RAM8(in=in, load=DM4, address=address[0..2], out=RA4);
    RAM8(in=in, load=DM5, address=address[0..2], out=RA5);
    RAM8(in=in, load=DM6, address=address[0..2], out=RA6);
    RAM8(in=in, load=DM7, address=address[0..2], out=RA7);
    RAM8(in=in, load=DM8, address=address[0..2], out=RA8);
    Mux8Way16(a=RA1, b=RA2, c=RA3, d=RA4, e=RA5, f=RA6, g=RA7, h=RA8, sel=address[3..5], out=out);
}

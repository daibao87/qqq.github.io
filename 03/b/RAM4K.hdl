// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM4K.hdl

/**
 * Memory of 4K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load,sel=address[6..8],a=A,b=B,c=C,d=D,e=E,f=F,g=G,h=H);
    RAM64(in=in,load=A,address=address[0..5],out=out1);
    RAM64(in=in,load=B,address=address[0..5],out=out2);
    RAM64(in=in,load=C,address=address[0..5],out=out3);
    RAM64(in=in,load=D,address=address[0..5],out=out4);
    RAM64(in=in,load=E,address=address[0..5],out=out5);
    RAM64(in=in,load=F,address=address[0..5],out=out6);
    RAM64(in=in,load=G,address=address[0..5],out=out7);
    RAM64(in=in,load=H,address=address[0..5],out=out8);
    Mux8Way16(a=out1,b=out2,c=out3,d=out4,e=out5,f=out6,g=out7,h=out8,sel=address[6..8],out=out);
}
